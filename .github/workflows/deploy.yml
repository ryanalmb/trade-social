name: Deploy to AWS ECS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_TELEGRAM: crypto-platform-telegram-bot
  ECR_REPOSITORY_WEB: crypto-platform-web-app  
  ECR_REPOSITORY_TRADING: crypto-platform-trading-engine
  ECS_CLUSTER: crypto-platform-dev-cluster

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          services/telegram-bot/package-lock.json
          services/web-app/package-lock.json
          services/trading-engine/package-lock.json
    
    - name: Install dependencies - Telegram Bot
      working-directory: ./services/telegram-bot
      run: npm ci
      
    - name: Install dependencies - Web App
      working-directory: ./services/web-app
      run: npm ci
      
    - name: Install dependencies - Trading Engine
      working-directory: ./services/trading-engine
      run: npm ci
    
    - name: Run linting - Telegram Bot
      working-directory: ./services/telegram-bot
      run: npm run lint
      
    - name: Run linting - Web App
      working-directory: ./services/web-app
      run: npm run lint
      
    - name: Run linting - Trading Engine
      working-directory: ./services/trading-engine
      run: npm run lint
    
    - name: Run tests - Telegram Bot
      working-directory: ./services/telegram-bot
      run: npm test
      
    - name: Run tests - Web App
      working-directory: ./services/web-app
      run: npm test
      
    - name: Run tests - Trading Engine
      working-directory: ./services/trading-engine
      run: npm test
    
    - name: Type checking - Telegram Bot
      working-directory: ./services/telegram-bot
      run: npm run build
      
    - name: Type checking - Web App
      working-directory: ./services/web-app
      run: npm run type-check
      
    - name: Type checking - Trading Engine
      working-directory: ./services/trading-engine
      run: npm run build

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Create ECR repositories if they don't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY_TELEGRAM || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY_TELEGRAM
        
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY_WEB || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY_WEB
        
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY_TRADING || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY_TRADING
    
    - name: Build, tag, and push Telegram Bot image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd services/telegram-bot
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_TELEGRAM:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_TELEGRAM:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_TELEGRAM:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_TELEGRAM:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_TELEGRAM:latest
    
    - name: Build, tag, and push Web App image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd services/web-app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_WEB:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEB:latest
    
    - name: Build, tag, and push Trading Engine image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd services/trading-engine
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_TRADING:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_TRADING:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_TRADING:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_TRADING:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_TRADING:latest
    
    - name: Update ECS task definitions
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update Telegram Bot task definition
        TASK_DEF=$(aws ecs describe-task-definition --task-definition crypto-platform-dev-telegram-bot --query taskDefinition)
        NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY_TELEGRAM:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
        echo $NEW_TASK_DEF > telegram-bot-task-def.json
        aws ecs register-task-definition --cli-input-json file://telegram-bot-task-def.json
        
        # Update Web App task definition  
        TASK_DEF=$(aws ecs describe-task-definition --task-definition crypto-platform-dev-web-app --query taskDefinition)
        NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
        echo $NEW_TASK_DEF > web-app-task-def.json
        aws ecs register-task-definition --cli-input-json file://web-app-task-def.json
        
        # Update Trading Engine task definition
        TASK_DEF=$(aws ecs describe-task-definition --task-definition crypto-platform-dev-trading-engine --query taskDefinition)
        NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY_TRADING:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
        echo $NEW_TASK_DEF > trading-engine-task-def.json
        aws ecs register-task-definition --cli-input-json file://trading-engine-task-def.json
    
    - name: Deploy to ECS
      run: |
        # Update Telegram Bot service
        aws ecs update-service --cluster $ECS_CLUSTER --service telegram-bot --task-definition crypto-platform-dev-telegram-bot --force-new-deployment
        
        # Update Web App service
        aws ecs update-service --cluster $ECS_CLUSTER --service web-app --task-definition crypto-platform-dev-web-app --force-new-deployment
        
        # Update Trading Engine service
        aws ecs update-service --cluster $ECS_CLUSTER --service trading-engine --task-definition crypto-platform-dev-trading-engine --force-new-deployment
    
    - name: Wait for deployment to complete
      run: |
        echo "Waiting for services to stabilize..."
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services telegram-bot web-app trading-engine
        echo "Deployment completed successfully!"
    
    - name: Verify deployment
      run: |
        # Check service status
        aws ecs describe-services --cluster $ECS_CLUSTER --services telegram-bot web-app trading-engine --query 'services[*].[serviceName,status,runningCount,desiredCount]' --output table
        
        # Test health endpoints
        echo "Testing health endpoints..."
        curl -f http://crypto-platform-dev-alb-505391454.us-east-1.elb.amazonaws.com/health || echo "Health check failed"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    
    steps:
    - name: Notify success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "‚úÖ Deployment successful!"
        echo "üöÄ Services are now running the latest version"
        echo "üåê Web App: http://crypto-platform-dev-alb-505391454.us-east-1.elb.amazonaws.com"
    
    - name: Notify failure
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "üîç Check the logs for details"
        exit 1
